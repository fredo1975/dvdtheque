pipeline {
	environment {
		PROD_SERVER_IP = "192.168.1.108"
		DEV1_SERVER_IP = "192.168.1.103"
		DEV2_SERVER_IP = "192.168.1.103"
		GIT_COMMIT_SHORT = sh(
                script: "printf \$(git rev-parse --short HEAD)",
                returnStdout: true
        )
		def VERSION = getArtifactVersion(GIT_COMMIT_SHORT)
        def ARTIFACT = "dvdtheque-config-server-${VERSION}.jar"
	}
    //agent { label 'slave01' }
	agent any
    stages{
		stage('Preparation') { // for display purposes
	      // Get some code from a GitHub repository
	      steps {
	      	script {
	      		if("${ENV}" == "dev"){
		            git branch: 'develop', url: 'https://github.com/fredo1975/dvdtheque.git'
		        }else if ("${ENV}" == "prod") {
		            git branch: 'master', url: 'https://github.com/fredo1975/dvdtheque.git'
		        }
	      	}
	      }
	   }
	   stage('Build') {
	      // Run the maven build
	          steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			  sh '''
				            echo "VERSION = ${VERSION}"
				            echo "NVERSION = ${NVERSION}"
				          '''
			      		 sh 'mvn org.codehaus.mojo:versions-maven-plugin:2.8.1:set -DnewVersion=${VERSION}'
				         sh 'mvn -U clean install -pl dvdtheque-config-server -am'
					}
		      	}
	      	}
	   }
	   stage('Stopping config server') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV1_SERVER_IP sudo systemctl stop dvdtheque-server-config.service"
				            sh "ssh jenkins@$DEV2_SERVER_IP sudo systemctl stop dvdtheque-server-config.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl stop dvdtheque-server-config.service"
				       }
		      		}
		      	}
		   }
	   }
	   stage('Copying config server jar') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "scp dvdtheque-config-server/target/$ARTIFACT jenkins@$DEV1_SERVER_IP:/opt/dvdtheque_server_config_service/dvdtheque-config-server.jar"
				            sh "scp dvdtheque-config-server/target/$ARTIFACT jenkins@$DEV2_SERVER_IP:/opt/dvdtheque_server_config_service/dvdtheque-config-server.jar"
				        }else if ("${ENV}" == "prod") {
				            sh "scp dvdtheque-config-server/target/$ARTIFACT jenkins@$PROD_SERVER_IP:/opt/dvdtheque_server_config_service/dvdtheque-config-server.jar"
				        }
		      		}
		      	}
		    }
	   }
	   stage('Sarting config server') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV1_SERVER_IP sudo systemctl start dvdtheque-server-config.service"
				            sh "ssh jenkins@$DEV2_SERVER_IP sudo systemctl start dvdtheque-server-config.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl start dvdtheque-server-config.service"
				       }
		      		}
		      	}
		    }
	   }
	   stage('Check status config server') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV1_SERVER_IP sudo systemctl status dvdtheque-server-config.service"
				            sh "ssh jenkins@$DEV2_SERVER_IP sudo systemctl status dvdtheque-server-config.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl status dvdtheque-server-config.service"
				       }
		      		}
		      	}
		    }
	   }
    }
}

private String getArtifactVersion(String gitRevision){
	def gitBranchName
	gitBranchName = env.GIT_BRANCH
	if(gitBranchName == "origin/develop"){
		return "${gitRevision}-SNAPSHOT"
	}
	if(gitBranchName == "origin/master"){
		gitTagName = sh script: "git describe --tags --all ${gitRevision}", returnStdout: true
		return "${gitRevision}"
	}
	return ""
}