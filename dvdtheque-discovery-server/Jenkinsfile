pipeline {
	environment {
		PROD_SERVER_IP = "192.168.1.108"
		DEV1_SERVER_IP = "192.168.1.105"
		DEV2_SERVER_IP = "192.168.1.103"
		GIT_COMMIT_SHORT = sh(
                script: "printf \$(git rev-parse --short HEAD)",
                returnStdout: true
        )
        
	}
    //agent { label 'slave01' }
	agent any
    stages{
		stage('Preparation') { // for display purposes
	      // Get some code from a GitHub repository
	      steps {
	      	script {
	      		if("${ENV}" == "dev"){
		            git branch: 'develop', url: 'https://github.com/fredo1975/dvdtheque.git'
		        }else if ("${ENV}" == "prod") {
		            git branch: 'master', url: 'https://github.com/fredo1975/dvdtheque.git'
		        }
	      	}
	      }
	   }
	   stage('Build') {
	      // Run the maven build
	          steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			  sh '''
				            echo "GIT_COMMIT_SHORT = ${GIT_COMMIT_SHORT}"
				          '''
				          if ("${ENV}" == "dev") {
				          	def VERSION = getArtifactVersionWithSnapshot(GIT_COMMIT_SHORT)
				          	sh '''
					            git checkout develop
					          '''
				         }else if ("${ENV}" == "prod") {
				         	def VERSION = getArtifactVersion(GIT_COMMIT_SHORT)
				         	sh '''
					            git checkout master
					          '''
				         }
				         sh '''
					     	mvn -B org.codehaus.mojo:versions-maven-plugin:2.8.1:set -DprocessAllModules -DnewVersion=${GIT_COMMIT_SHORT}
					        mvn -U clean install -pl dvdtheque-discovery-server -am
					     '''
					}
		      	}
	      	}
	   }
	   stage('Stopping discovery server 1') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV1_SERVER_IP sudo systemctl stop dvdtheque-discovery-server.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl stop dvdtheque-discovery-server.service"
				       }
		      		}
		      	}
		   }
	   }
	   stage('Stopping discovery server 2') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV2_SERVER_IP sudo systemctl stop dvdtheque-discovery-server.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl stop dvdtheque-discovery-server.service"
				       }
		      		}
		      	}
		   }
	   }
	   stage('Copying discovery server 1 jar') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
							def ARTIFACT = "dvdtheque-discovery-server-${GIT_COMMIT_SHORT}.jar"
				            sh "scp dvdtheque-discovery-server/target/$ARTIFACT jenkins@$DEV1_SERVER_IP:/opt/dvdtheque_discovery_server_service/dvdtheque-discovery-server.jar"
				        }else if ("${ENV}" == "prod") {
				            def ARTIFACT = "dvdtheque-discovery-server-${NVERSION}.jar"
				            sh "scp dvdtheque-discovery-server/target/$ARTIFACT jenkins@$PROD_SERVER_IP:/opt/dvdtheque_discovery_server_service/dvdtheque-discovery-server.jar"
				        }
		      		}
		      	}
		    }
	   }
	   stage('Copying discovery server 2 jar') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
							def ARTIFACT = "dvdtheque-discovery-server-${GIT_COMMIT_SHORT}.jar"
				            sh "scp dvdtheque-discovery-server/target/$ARTIFACT jenkins@$DEV2_SERVER_IP:/opt/dvdtheque_discovery_server_service/dvdtheque-discovery-server.jar"
				        }else if ("${ENV}" == "prod") {
				            def ARTIFACT = "dvdtheque-discovery-server-${NVERSION}.jar"
				            sh "scp dvdtheque-discovery-server/target/$ARTIFACT jenkins@$PROD_SERVER_IP:/opt/dvdtheque_discovery_server_service/dvdtheque-discovery-server.jar"
				        }
		      		}
		      	}
		    }
	   }
	   stage('Sarting discovery server 1') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV1_SERVER_IP sudo systemctl start dvdtheque-discovery-server.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl start dvdtheque-discovery-server.service"
				       }
		      		}
		      	}
		    }
	   }
	   stage('Sarting discovery server 2') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV2_SERVER_IP sudo systemctl start dvdtheque-discovery-server.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl start dvdtheque-discovery-server.service"
				       }
		      		}
		      	}
		    }
	   }
	   stage('Check status discovery server 1') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV1_SERVER_IP sudo systemctl status dvdtheque-discovery-server.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl status dvdtheque-discovery-server.service"
				       }
		      		}
		      	}
		    }
	   }
	   stage('Check status discovery server 2') {
	   		steps {
		      	script {
		      		withMaven(mavenSettingsConfig: 'MyMavenSettings') {
		      			if("${ENV}" == "dev"){
				            sh "ssh jenkins@$DEV2_SERVER_IP sudo systemctl status dvdtheque-discovery-server.service"
				       }else if ("${ENV}" == "prod") {
				            sh "ssh jenkins@$PROD_SERVER_IP sudo systemctl status dvdtheque-discovery-server.service"
				       }
		      		}
		      	}
		    }
	   }
    }
}

private String getArtifactVersionWithSnapshot(String gitCommit){
	return "${gitCommit}-SNAPSHOT"
}
private String getArtifactVersion(String gitCommit){
	return "${gitCommit}"
}